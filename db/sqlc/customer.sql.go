// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customer.sql

package db

import (
	"context"
)

const addCustomer = `-- name: AddCustomer :one
INSERT INTO customers (
    name, 
    phone, 
    address, 
    email
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, phone, address, email
`

type AddCustomerParams struct {
	Name    string `json:"name"`
	Phone   string `json:"phone"`
	Address string `json:"address"`
	Email   string `json:"email"`
}

func (q *Queries) AddCustomer(ctx context.Context, arg AddCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, addCustomer,
		arg.Name,
		arg.Phone,
		arg.Address,
		arg.Email,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Address,
		&i.Email,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, phone, address, email FROM customers WHERE id = $1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Address,
		&i.Email,
	)
	return i, err
}
